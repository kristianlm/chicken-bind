;;;; chicken-bind.scm - Standalone wrapper generator


(define ##compiler#debugging-chicken '())

(require-extension srfi-1 utils bind-translator extras)

(define (usage #!optional (status 0))
  (print #<<EOF
usage: chicken-bind [OPTION | FILENAME ...]

  -help              show this message
  -o FILENAME        where to write generated code to
  -debug             generate additional debug output
  -export-constants  add toplevel definitions for constants
  -class-finalizers  use finalizers for class instances
  -mutable-fields    instance fields are mutable
  -prefix PREFIX     prefix to be used for names
  -full-specialization       specialize methods on all arguments
  -default-renaming PREFIX   use default renaming rules
  -follow-include    recursively process #include'd files

Reads C/C++ files and generates Scheme wrapper code.
Specifying "-" as filename reads from stdin.
EOF
) (exit status) )

(define (main args)
  (let ((files '())
	(output #f))
    (let loop ((arg args))
      (unless (null? args)
	(let ((arg (car args))
	      (rest (cdr args)))
	  (cond ((string=? "-debug" arg)
		 (set! ##compiler#debugging-chicken '(C))
		 #f)
		((string=? "-export-constants" arg)
		 (set-bind-options export-constants: #t)
		 (loop rest))
		((string=? "-mutable-fields" arg)
		 (set-bind-options mutable-fields: #t)
		 (loop rest))
		((string=? "-full-specialization" arg)
		 (set-bind-options full-specialization: #t)
		 (loop rest))
		((string=? "-follow-include" arg)
		 (set-bind-options follow-include: #t)
		 (loop rest))
		((string=? "-default-renaming" arg)
		 (unless (pair? rest) (usage 1))
		 (set-bind-options default-renaming: (car rest))
		 (loop (cdr rest)))
		((string=? "-prefix" arg)
		 (unless (pair? rest) (usage 1))
		 (set-bind-options prefix: (car rest))
		 (loop (cdr rest)))
		((string=? "-o" arg)
		 (when (null? rest) (usage 1))
		 (set! output (car rest))
		 (loop (cdr rest)))
		((member arg '("--help" "-help" "-h"))
		 (usage 0) )
		((and (> (string-length arg) 1)
		      (char=? #\- (string-ref arg 0)) )
		 (usage 1) )
		(else 
		 (set! files (cons arg files))
		 (loop rest))))))
    (when (null? files) (usage 1))
    (when (and output (not (string=? "-" output)))
      (set! output (open-output-file output)))
    (for-each
     (lambda (f)
       (define (process)
	 (print "\n;;; GENERATED BY CHICKEN-BIND FROM " f #\newline)
	 (pp `(begin
		,@(parse-easy-ffi
		   (read-all
		    (if (string=? f "-") 
			(current-input-port)
			f) )
		   identity)))
	 (print "\n;;; END OF FILE"))
       (cond ((equal? "-" output) (process))
	     ((port? output)
	      (with-output-to-port output process))
	     (else 
	      (with-output-to-file (pathname-replace-extension f "scm")
		process) ) ))
     (reverse files) ) ) )

(main (command-line-arguments))
